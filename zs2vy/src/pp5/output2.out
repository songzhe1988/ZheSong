_offset_Random_0:
	BeginFunc 4 ;
	_tmp0 = 0 ;
	Return _tmp0 ;
	EndFunc ;
VTable Random =
	_offset_Random_0,
	f_Random.Init,
	f_Random.GenRandom,
	f_Random.RndInt,
; 
f_Random.Init:
	BeginFunc 20 ;
	_tmp1 = 4 ;
	_tmp2 = this + _tmp1 ;
	_tmp3 = *(_tmp2) ;
	_tmp4 = 4 ;
	_tmp5 = this + _tmp4 ;
	*(_tmp5) = seedVal ;
	EndFunc ;
f_Random.GenRandom:
	BeginFunc 76 ;
	_tmp6 = 4 ;
	_tmp7 = this + _tmp6 ;
	_tmp8 = *(_tmp7) ;
	_tmp9 = 15625 ;
	_tmp10 = 4 ;
	_tmp11 = this + _tmp10 ;
	_tmp12 = *(_tmp11) ;
	_tmp13 = 10000 ;
	_tmp14 = _tmp12 % _tmp13 ;
	_tmp15 = _tmp9 * _tmp14 ;
	_tmp16 = 22221 ;
	_tmp17 = _tmp15 + _tmp16 ;
	_tmp18 = 65536 ;
	_tmp19 = _tmp17 % _tmp18 ;
	_tmp20 = 4 ;
	_tmp21 = this + _tmp20 ;
	*(_tmp21) = _tmp19 ;
	_tmp22 = 4 ;
	_tmp23 = this + _tmp22 ;
	_tmp24 = *(_tmp23) ;
	Return _tmp24 ;
	EndFunc ;
f_Random.RndInt:
	BeginFunc 28 ;
	_tmp25 = *(this) ;
	_tmp26 = *(_tmp25) ;
	_tmp27 = ACall _tmp26 ;
	_tmp28 = this - _tmp27 ;
	_tmp29 = *(_tmp25) ;
	PushParam _tmp28 ;
	_tmp30 = ACall _tmp29 ;
	PopParams 4 ;
	_tmp31 = _tmp30 % max ;
	Return _tmp31 ;
	EndFunc ;
_offset_Deck_0:
	BeginFunc 4 ;
	_tmp32 = 0 ;
	Return _tmp32 ;
	EndFunc ;
VTable Deck =
	_offset_Deck_0,
	f_Deck.Init,
	f_Deck.Shuffle,
	f_Deck.GetCard,
; 
f_Deck.Init:
	BeginFunc 52 ;
	_tmp33 = 8 ;
	_tmp34 = this + _tmp33 ;
	_tmp35 = *(_tmp34) ;
	_tmp36 = 52 ;
	_tmp37 = 0 ;
	_tmp38 = 4 ;
	_tmp39 = _tmp37 < _tmp36 ;
	IfZ _tmp39 Goto _L0 ;
	Goto _L1 ;
_L0:
	_tmp40 = "Decaf runtime error: Array size is <= 0\n" ;
	PushParam _tmp40 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L1:
	_tmp41 = _tmp36 * _tmp38 ;
	_tmp42 = _tmp41 + _tmp38 ;
	PushParam _tmp42 ;
	_tmp43 = LCall _Alloc ;
	PopParams 4 ;
	*(_tmp43) = _tmp36 ;
	_tmp44 = 8 ;
	_tmp45 = this + _tmp44 ;
	*(_tmp45) = _tmp43 ;
	EndFunc ;
f_Deck.Shuffle:
	BeginFunc 776 ;
	_tmp46 = 4 ;
	_tmp47 = this + _tmp46 ;
	_tmp48 = *(_tmp47) ;
	_tmp49 = 0 ;
	_tmp50 = 4 ;
	_tmp51 = this + _tmp50 ;
	*(_tmp51) = _tmp49 ;
_L2:
	_tmp52 = 4 ;
	_tmp53 = this + _tmp52 ;
	_tmp54 = *(_tmp53) ;
	_tmp55 = 52 ;
	_tmp56 = _tmp54 < _tmp55 ;
	IfZ _tmp56 Goto _L3 ;
	_tmp57 = 8 ;
	_tmp58 = this + _tmp57 ;
	_tmp59 = *(_tmp58) ;
	_tmp60 = 4 ;
	_tmp61 = this + _tmp60 ;
	_tmp62 = *(_tmp61) ;
	_tmp63 = 0 ;
	_tmp64 = 4 ;
	_tmp65 = *(_tmp59) ;
	_tmp66 = _tmp65 == _tmp62 ;
	_tmp67 = _tmp65 < _tmp62 ;
	_tmp68 = _tmp67 || _tmp66 ;
	_tmp69 = _tmp62 < _tmp63 ;
	_tmp70 = _tmp69 || _tmp68 ;
	IfZ _tmp70 Goto _L4 ;
	_tmp71 = "Decaf runtime error: Array subscript out of bound..." ;
	PushParam _tmp71 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L4:
	_tmp72 = _tmp62 * _tmp64 ;
	_tmp73 = _tmp72 + _tmp64 ;
	_tmp74 = _tmp59 + _tmp73 ;
	_tmp75 = *(_tmp74) ;
	_tmp76 = 4 ;
	_tmp77 = this + _tmp76 ;
	_tmp78 = *(_tmp77) ;
	_tmp79 = 1 ;
	_tmp80 = _tmp78 + _tmp79 ;
	_tmp81 = 13 ;
	_tmp82 = _tmp80 % _tmp81 ;
	_tmp83 = 8 ;
	_tmp84 = this + _tmp83 ;
	_tmp85 = *(_tmp84) ;
	_tmp86 = 4 ;
	_tmp87 = this + _tmp86 ;
	_tmp88 = *(_tmp87) ;
	_tmp89 = 0 ;
	_tmp90 = 4 ;
	_tmp91 = *(_tmp85) ;
	_tmp92 = _tmp91 == _tmp88 ;
	_tmp93 = _tmp91 < _tmp88 ;
	_tmp94 = _tmp93 || _tmp92 ;
	_tmp95 = _tmp88 < _tmp89 ;
	_tmp96 = _tmp95 || _tmp94 ;
	IfZ _tmp96 Goto _L5 ;
	_tmp97 = "Decaf runtime error: Array subscript out of bound..." ;
	PushParam _tmp97 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L5:
	_tmp98 = _tmp88 * _tmp90 ;
	_tmp99 = _tmp98 + _tmp90 ;
	_tmp100 = _tmp85 + _tmp99 ;
	*(_tmp100) = _tmp82 ;
	_tmp101 = 4 ;
	_tmp102 = this + _tmp101 ;
	_tmp103 = *(_tmp102) ;
	_tmp104 = 4 ;
	_tmp105 = this + _tmp104 ;
	_tmp106 = *(_tmp105) ;
	_tmp107 = 1 ;
	_tmp108 = _tmp106 + _tmp107 ;
	_tmp109 = 4 ;
	_tmp110 = this + _tmp109 ;
	*(_tmp110) = _tmp108 ;
	Goto _L2 ;
_L3:
_L6:
	_tmp111 = 4 ;
	_tmp112 = this + _tmp111 ;
	_tmp113 = *(_tmp112) ;
	_tmp114 = 0 ;
	_tmp115 = _tmp114 < _tmp113 ;
	IfZ _tmp115 Goto _L7 ;
	_tmp116 = 4 ;
	_tmp117 = this + _tmp116 ;
	_tmp118 = *(_tmp117) ;
	PushParam _tmp118 ;
	_tmp119 = *(gRnd) ;
	_tmp120 = *(_tmp119) ;
	_tmp121 = ACall _tmp120 ;
	_tmp122 = gRnd - _tmp121 ;
	_tmp123 = *(_tmp119 + 12) ;
	PushParam _tmp122 ;
	_tmp124 = ACall _tmp123 ;
	PopParams 8 ;
	r = _tmp124 ;
	_tmp125 = 4 ;
	_tmp126 = this + _tmp125 ;
	_tmp127 = *(_tmp126) ;
	_tmp128 = 4 ;
	_tmp129 = this + _tmp128 ;
	_tmp130 = *(_tmp129) ;
	_tmp131 = 1 ;
	_tmp132 = _tmp130 - _tmp131 ;
	_tmp133 = 4 ;
	_tmp134 = this + _tmp133 ;
	*(_tmp134) = _tmp132 ;
	_tmp135 = 8 ;
	_tmp136 = this + _tmp135 ;
	_tmp137 = *(_tmp136) ;
	_tmp138 = 4 ;
	_tmp139 = this + _tmp138 ;
	_tmp140 = *(_tmp139) ;
	_tmp141 = 0 ;
	_tmp142 = 4 ;
	_tmp143 = *(_tmp137) ;
	_tmp144 = _tmp143 == _tmp140 ;
	_tmp145 = _tmp143 < _tmp140 ;
	_tmp146 = _tmp145 || _tmp144 ;
	_tmp147 = _tmp140 < _tmp141 ;
	_tmp148 = _tmp147 || _tmp146 ;
	IfZ _tmp148 Goto _L8 ;
	_tmp149 = "Decaf runtime error: Array subscript out of bound..." ;
	PushParam _tmp149 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L8:
	_tmp150 = _tmp140 * _tmp142 ;
	_tmp151 = _tmp150 + _tmp142 ;
	_tmp152 = _tmp137 + _tmp151 ;
	_tmp153 = *(_tmp152) ;
	temp = _tmp153 ;
	_tmp154 = 8 ;
	_tmp155 = this + _tmp154 ;
	_tmp156 = *(_tmp155) ;
	_tmp157 = 4 ;
	_tmp158 = this + _tmp157 ;
	_tmp159 = *(_tmp158) ;
	_tmp160 = 0 ;
	_tmp161 = 4 ;
	_tmp162 = *(_tmp156) ;
	_tmp163 = _tmp162 == _tmp159 ;
	_tmp164 = _tmp162 < _tmp159 ;
	_tmp165 = _tmp164 || _tmp163 ;
	_tmp166 = _tmp159 < _tmp160 ;
	_tmp167 = _tmp166 || _tmp165 ;
	IfZ _tmp167 Goto _L9 ;
	_tmp168 = "Decaf runtime error: Array subscript out of bound..." ;
	PushParam _tmp168 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L9:
	_tmp169 = _tmp159 * _tmp161 ;
	_tmp170 = _tmp169 + _tmp161 ;
	_tmp171 = _tmp156 + _tmp170 ;
	_tmp172 = *(_tmp171) ;
	_tmp173 = 8 ;
	_tmp174 = this + _tmp173 ;
	_tmp175 = *(_tmp174) ;
	_tmp176 = 0 ;
	_tmp177 = 4 ;
	_tmp178 = *(_tmp175) ;
	_tmp179 = _tmp178 == r ;
	_tmp180 = _tmp178 < r ;
	_tmp181 = _tmp180 || _tmp179 ;
	_tmp182 = r < _tmp176 ;
	_tmp183 = _tmp182 || _tmp181 ;
	IfZ _tmp183 Goto _L10 ;
	_tmp184 = "Decaf runtime error: Array subscript out of bound..." ;
	PushParam _tmp184 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L10:
	_tmp185 = r * _tmp177 ;
	_tmp186 = _tmp185 + _tmp177 ;
	_tmp187 = _tmp175 + _tmp186 ;
	_tmp188 = *(_tmp187) ;
	_tmp189 = 8 ;
	_tmp190 = this + _tmp189 ;
	_tmp191 = *(_tmp190) ;
	_tmp192 = 4 ;
	_tmp193 = this + _tmp192 ;
	_tmp194 = *(_tmp193) ;
	_tmp195 = 0 ;
	_tmp196 = 4 ;
	_tmp197 = *(_tmp191) ;
	_tmp198 = _tmp197 == _tmp194 ;
	_tmp199 = _tmp197 < _tmp194 ;
	_tmp200 = _tmp199 || _tmp198 ;
	_tmp201 = _tmp194 < _tmp195 ;
	_tmp202 = _tmp201 || _tmp200 ;
	IfZ _tmp202 Goto _L11 ;
	_tmp203 = "Decaf runtime error: Array subscript out of bound..." ;
	PushParam _tmp203 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L11:
	_tmp204 = _tmp194 * _tmp196 ;
	_tmp205 = _tmp204 + _tmp196 ;
	_tmp206 = _tmp191 + _tmp205 ;
	*(_tmp206) = _tmp188 ;
	_tmp207 = 8 ;
	_tmp208 = this + _tmp207 ;
	_tmp209 = *(_tmp208) ;
	_tmp210 = 0 ;
	_tmp211 = 4 ;
	_tmp212 = *(_tmp209) ;
	_tmp213 = _tmp212 == r ;
	_tmp214 = _tmp212 < r ;
	_tmp215 = _tmp214 || _tmp213 ;
	_tmp216 = r < _tmp210 ;
	_tmp217 = _tmp216 || _tmp215 ;
	IfZ _tmp217 Goto _L12 ;
	_tmp218 = "Decaf runtime error: Array subscript out of bound..." ;
	PushParam _tmp218 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L12:
	_tmp219 = r * _tmp211 ;
	_tmp220 = _tmp219 + _tmp211 ;
	_tmp221 = _tmp209 + _tmp220 ;
	_tmp222 = *(_tmp221) ;
	_tmp223 = 8 ;
	_tmp224 = this + _tmp223 ;
	_tmp225 = *(_tmp224) ;
	_tmp226 = 0 ;
	_tmp227 = 4 ;
	_tmp228 = *(_tmp225) ;
	_tmp229 = _tmp228 == r ;
	_tmp230 = _tmp228 < r ;
	_tmp231 = _tmp230 || _tmp229 ;
	_tmp232 = r < _tmp226 ;
	_tmp233 = _tmp232 || _tmp231 ;
	IfZ _tmp233 Goto _L13 ;
	_tmp234 = "Decaf runtime error: Array subscript out of bound..." ;
	PushParam _tmp234 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L13:
	_tmp235 = r * _tmp227 ;
	_tmp236 = _tmp235 + _tmp227 ;
	_tmp237 = _tmp225 + _tmp236 ;
	*(_tmp237) = temp ;
	Goto _L6 ;
_L7:
	EndFunc ;
f_Deck.GetCard:
	BeginFunc 152 ;
	_tmp238 = 4 ;
	_tmp239 = this + _tmp238 ;
	_tmp240 = *(_tmp239) ;
	_tmp241 = 52 ;
	_tmp242 = _tmp240 == _tmp241 ;
	_tmp243 = _tmp241 < _tmp240 ;
	_tmp244 = _tmp243 || _tmp242 ;
	IfZ _tmp244 Goto _L14 ;
	_tmp245 = 0 ;
	Return _tmp245 ;
_L14:
	_tmp246 = 8 ;
	_tmp247 = this + _tmp246 ;
	_tmp248 = *(_tmp247) ;
	_tmp249 = 4 ;
	_tmp250 = this + _tmp249 ;
	_tmp251 = *(_tmp250) ;
	_tmp252 = 0 ;
	_tmp253 = 4 ;
	_tmp254 = *(_tmp248) ;
	_tmp255 = _tmp254 == _tmp251 ;
	_tmp256 = _tmp254 < _tmp251 ;
	_tmp257 = _tmp256 || _tmp255 ;
	_tmp258 = _tmp251 < _tmp252 ;
	_tmp259 = _tmp258 || _tmp257 ;
	IfZ _tmp259 Goto _L15 ;
	_tmp260 = "Decaf runtime error: Array subscript out of bound..." ;
	PushParam _tmp260 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L15:
	_tmp261 = _tmp251 * _tmp253 ;
	_tmp262 = _tmp261 + _tmp253 ;
	_tmp263 = _tmp248 + _tmp262 ;
	_tmp264 = *(_tmp263) ;
	result = _tmp264 ;
	_tmp265 = 4 ;
	_tmp266 = this + _tmp265 ;
	_tmp267 = *(_tmp266) ;
	_tmp268 = 4 ;
	_tmp269 = this + _tmp268 ;
	_tmp270 = *(_tmp269) ;
	_tmp271 = 1 ;
	_tmp272 = _tmp270 + _tmp271 ;
	_tmp273 = 4 ;
	_tmp274 = this + _tmp273 ;
	*(_tmp274) = _tmp272 ;
	Return result ;
	EndFunc ;
_offset_BJDeck_0:
	BeginFunc 4 ;
	_tmp275 = 0 ;
	Return _tmp275 ;
	EndFunc ;
VTable BJDeck =
	_offset_BJDeck_0,
	f_BJDeck.Init,
	f_BJDeck.DealCard,
	f_BJDeck.Shuffle,
	f_BJDeck.NumCardsRemaining,
; 
f_BJDeck.Init:
	BeginFunc 296 ;
	_tmp276 = 4 ;
	_tmp277 = this + _tmp276 ;
	_tmp278 = *(_tmp277) ;
	_tmp279 = 8 ;
	_tmp280 = 0 ;
	_tmp281 = 4 ;
	_tmp282 = _tmp280 < _tmp279 ;
	IfZ _tmp282 Goto _L16 ;
	Goto _L17 ;
_L16:
	_tmp283 = "Decaf runtime error: Array size is <= 0\n" ;
	PushParam _tmp283 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L17:
	_tmp284 = _tmp279 * _tmp281 ;
	_tmp285 = _tmp284 + _tmp281 ;
	PushParam _tmp285 ;
	_tmp286 = LCall _Alloc ;
	PopParams 4 ;
	*(_tmp286) = _tmp279 ;
	_tmp287 = 4 ;
	_tmp288 = this + _tmp287 ;
	*(_tmp288) = _tmp286 ;
	_tmp289 = 0 ;
	i = _tmp289 ;
_L18:
	_tmp290 = 8 ;
	_tmp291 = i < _tmp290 ;
	IfZ _tmp291 Goto _L19 ;
	_tmp292 = 4 ;
	_tmp293 = this + _tmp292 ;
	_tmp294 = *(_tmp293) ;
	_tmp295 = 0 ;
	_tmp296 = 4 ;
	_tmp297 = *(_tmp294) ;
	_tmp298 = _tmp297 == i ;
	_tmp299 = _tmp297 < i ;
	_tmp300 = _tmp299 || _tmp298 ;
	_tmp301 = i < _tmp295 ;
	_tmp302 = _tmp301 || _tmp300 ;
	IfZ _tmp302 Goto _L20 ;
	_tmp303 = "Decaf runtime error: Array subscript out of bound..." ;
	PushParam _tmp303 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L20:
	_tmp304 = i * _tmp296 ;
	_tmp305 = _tmp304 + _tmp296 ;
	_tmp306 = _tmp294 + _tmp305 ;
	_tmp307 = *(_tmp306) ;
	_tmp308 = 12 ;
	PushParam _tmp308 ;
	_tmp309 = LCall _Alloc ;
	PopParams 4 ;
	_tmp310 = Deck ;
	*(_tmp309) = _tmp310 ;
	_tmp311 = 4 ;
	_tmp312 = this + _tmp311 ;
	_tmp313 = *(_tmp312) ;
	_tmp314 = 0 ;
	_tmp315 = 4 ;
	_tmp316 = *(_tmp313) ;
	_tmp317 = _tmp316 == i ;
	_tmp318 = _tmp316 < i ;
	_tmp319 = _tmp318 || _tmp317 ;
	_tmp320 = i < _tmp314 ;
	_tmp321 = _tmp320 || _tmp319 ;
	IfZ _tmp321 Goto _L21 ;
	_tmp322 = "Decaf runtime error: Array subscript out of bound..." ;
	PushParam _tmp322 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L21:
	_tmp323 = i * _tmp315 ;
	_tmp324 = _tmp323 + _tmp315 ;
	_tmp325 = _tmp313 + _tmp324 ;
	*(_tmp325) = _tmp309 ;
	_tmp326 = 4 ;
	_tmp327 = this + _tmp326 ;
	_tmp328 = *(_tmp327) ;
	_tmp329 = 0 ;
	_tmp330 = 4 ;
	_tmp331 = *(_tmp328) ;
	_tmp332 = _tmp331 == i ;
	_tmp333 = _tmp331 < i ;
	_tmp334 = _tmp333 || _tmp332 ;
	_tmp335 = i < _tmp329 ;
	_tmp336 = _tmp335 || _tmp334 ;
	IfZ _tmp336 Goto _L22 ;
	_tmp337 = "Decaf runtime error: Array subscript out of bound..." ;
	PushParam _tmp337 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L22:
	_tmp338 = i * _tmp330 ;
	_tmp339 = _tmp338 + _tmp330 ;
	_tmp340 = _tmp328 + _tmp339 ;
	_tmp341 = *(_tmp340) ;
	_tmp342 = *(_tmp341) ;
	_tmp343 = *(_tmp342) ;
	_tmp344 = ACall _tmp343 ;
	_tmp345 = _tmp341 - _tmp344 ;
	_tmp346 = *(_tmp342 + 4) ;
	PushParam _tmp345 ;
	ACall _tmp346 ;
	PopParams 4 ;
	_tmp347 = 1 ;
	_tmp348 = i + _tmp347 ;
	i = _tmp348 ;
	Goto _L18 ;
_L19:
	EndFunc ;
f_BJDeck.DealCard:
	BeginFunc 240 ;
	_tmp349 = 0 ;
	c = _tmp349 ;
	_tmp350 = 8 ;
	_tmp351 = this + _tmp350 ;
	_tmp352 = *(_tmp351) ;
	_tmp353 = 8 ;
	_tmp354 = 52 ;
	_tmp355 = _tmp353 * _tmp354 ;
	_tmp356 = _tmp352 == _tmp355 ;
	_tmp357 = _tmp355 < _tmp352 ;
	_tmp358 = _tmp357 || _tmp356 ;
	IfZ _tmp358 Goto _L23 ;
	_tmp359 = 11 ;
	Return _tmp359 ;
_L23:
_L24:
	_tmp360 = 0 ;
	_tmp361 = c == _tmp360 ;
	IfZ _tmp361 Goto _L25 ;
	_tmp362 = 8 ;
	PushParam _tmp362 ;
	_tmp363 = *(gRnd) ;
	_tmp364 = *(_tmp363) ;
	_tmp365 = ACall _tmp364 ;
	_tmp366 = gRnd - _tmp365 ;
	_tmp367 = *(_tmp363 + 12) ;
	PushParam _tmp366 ;
	_tmp368 = ACall _tmp367 ;
	PopParams 8 ;
	d = _tmp368 ;
	_tmp369 = 4 ;
	_tmp370 = this + _tmp369 ;
	_tmp371 = *(_tmp370) ;
	_tmp372 = 0 ;
	_tmp373 = 4 ;
	_tmp374 = *(_tmp371) ;
	_tmp375 = _tmp374 == d ;
	_tmp376 = _tmp374 < d ;
	_tmp377 = _tmp376 || _tmp375 ;
	_tmp378 = d < _tmp372 ;
	_tmp379 = _tmp378 || _tmp377 ;
	IfZ _tmp379 Goto _L26 ;
	_tmp380 = "Decaf runtime error: Array subscript out of bound..." ;
	PushParam _tmp380 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L26:
	_tmp381 = d * _tmp373 ;
	_tmp382 = _tmp381 + _tmp373 ;
	_tmp383 = _tmp371 + _tmp382 ;
	_tmp384 = *(_tmp383) ;
	_tmp385 = *(_tmp384) ;
	_tmp386 = *(_tmp385) ;
	_tmp387 = ACall _tmp386 ;
	_tmp388 = _tmp384 - _tmp387 ;
	_tmp389 = *(_tmp385 + 12) ;
	PushParam _tmp388 ;
	_tmp390 = ACall _tmp389 ;
	PopParams 4 ;
	c = _tmp390 ;
	Goto _L24 ;
_L25:
	_tmp391 = 10 ;
	_tmp392 = _tmp391 < c ;
	IfZ _tmp392 Goto _L28 ;
	_tmp393 = 10 ;
	c = _tmp393 ;
	Goto _L27 ;
_L28:
	_tmp394 = 1 ;
	_tmp395 = c == _tmp394 ;
	IfZ _tmp395 Goto _L29 ;
	_tmp396 = 11 ;
	c = _tmp396 ;
_L29:
_L27:
	_tmp397 = 8 ;
	_tmp398 = this + _tmp397 ;
	_tmp399 = *(_tmp398) ;
	_tmp400 = 8 ;
	_tmp401 = this + _tmp400 ;
	_tmp402 = *(_tmp401) ;
	_tmp403 = 1 ;
	_tmp404 = _tmp402 + _tmp403 ;
	_tmp405 = 8 ;
	_tmp406 = this + _tmp405 ;
	*(_tmp406) = _tmp404 ;
	Return c ;
	EndFunc ;
f_BJDeck.Shuffle:
	BeginFunc 140 ;
	_tmp407 = "Shuffling..." ;
	PushParam _tmp407 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp408 = 0 ;
	i = _tmp408 ;
_L30:
	_tmp409 = 8 ;
	_tmp410 = i < _tmp409 ;
	IfZ _tmp410 Goto _L31 ;
	_tmp411 = 4 ;
	_tmp412 = this + _tmp411 ;
	_tmp413 = *(_tmp412) ;
	_tmp414 = 0 ;
	_tmp415 = 4 ;
	_tmp416 = *(_tmp413) ;
	_tmp417 = _tmp416 == i ;
	_tmp418 = _tmp416 < i ;
	_tmp419 = _tmp418 || _tmp417 ;
	_tmp420 = i < _tmp414 ;
	_tmp421 = _tmp420 || _tmp419 ;
	IfZ _tmp421 Goto _L32 ;
	_tmp422 = "Decaf runtime error: Array subscript out of bound..." ;
	PushParam _tmp422 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L32:
	_tmp423 = i * _tmp415 ;
	_tmp424 = _tmp423 + _tmp415 ;
	_tmp425 = _tmp413 + _tmp424 ;
	_tmp426 = *(_tmp425) ;
	_tmp427 = *(_tmp426) ;
	_tmp428 = *(_tmp427) ;
	_tmp429 = ACall _tmp428 ;
	_tmp430 = _tmp426 - _tmp429 ;
	_tmp431 = *(_tmp427 + 8) ;
	PushParam _tmp430 ;
	ACall _tmp431 ;
	PopParams 4 ;
	_tmp432 = 1 ;
	_tmp433 = i + _tmp432 ;
	i = _tmp433 ;
	Goto _L30 ;
_L31:
	_tmp434 = 8 ;
	_tmp435 = this + _tmp434 ;
	_tmp436 = *(_tmp435) ;
	_tmp437 = 0 ;
	_tmp438 = 8 ;
	_tmp439 = this + _tmp438 ;
	*(_tmp439) = _tmp437 ;
	_tmp440 = "done.\n" ;
	PushParam _tmp440 ;
	LCall _PrintString ;
	PopParams 4 ;
	EndFunc ;
f_BJDeck.NumCardsRemaining:
	BeginFunc 28 ;
	_tmp441 = 8 ;
	_tmp442 = 52 ;
	_tmp443 = _tmp441 * _tmp442 ;
	_tmp444 = 8 ;
	_tmp445 = this + _tmp444 ;
	_tmp446 = *(_tmp445) ;
	_tmp447 = _tmp443 - _tmp446 ;
	Return _tmp447 ;
	EndFunc ;
_offset_Player_0:
	BeginFunc 4 ;
	_tmp448 = 0 ;
	Return _tmp448 ;
	EndFunc ;
VTable Player =
	_offset_Player_0,
	f_Player.Init,
	f_Player.Hit,
	f_Player.DoubleDown,
	f_Player.TakeTurn,
	f_Player.HasMoney,
	f_Player.PrintMoney,
	f_Player.PlaceBet,
	f_Player.GetTotal,
	f_Player.Resolve,
; 
f_Player.Init:
	BeginFunc 56 ;
	_tmp449 = 20 ;
	_tmp450 = this + _tmp449 ;
	_tmp451 = *(_tmp450) ;
	_tmp452 = 1000 ;
	_tmp453 = 20 ;
	_tmp454 = this + _tmp453 ;
	*(_tmp454) = _tmp452 ;
	_tmp455 = "What is the name of player #" ;
	PushParam _tmp455 ;
	LCall _PrintString ;
	PopParams 4 ;
	PushParam num ;
	LCall _PrintInt ;
	PopParams 4 ;
	_tmp456 = "? " ;
	PushParam _tmp456 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp457 = 24 ;
	_tmp458 = this + _tmp457 ;
	_tmp459 = *(_tmp458) ;
	_tmp460 = LCall _ReadLine ;
	_tmp461 = 24 ;
	_tmp462 = this + _tmp461 ;
	*(_tmp462) = _tmp460 ;
	EndFunc ;
f_Player.Hit:
	BeginFunc 296 ;
	_tmp463 = *(deck) ;
	_tmp464 = *(_tmp463) ;
	_tmp465 = ACall _tmp464 ;
	_tmp466 = deck - _tmp465 ;
	_tmp467 = *(_tmp463 + 8) ;
	PushParam _tmp466 ;
	_tmp468 = ACall _tmp467 ;
	PopParams 4 ;
	card = _tmp468 ;
	_tmp469 = 24 ;
	_tmp470 = this + _tmp469 ;
	_tmp471 = *(_tmp470) ;
	PushParam _tmp471 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp472 = " was dealt a " ;
	PushParam _tmp472 ;
	LCall _PrintString ;
	PopParams 4 ;
	PushParam card ;
	LCall _PrintInt ;
	PopParams 4 ;
	_tmp473 = ".\n" ;
	PushParam _tmp473 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp474 = 4 ;
	_tmp475 = this + _tmp474 ;
	_tmp476 = *(_tmp475) ;
	_tmp477 = 4 ;
	_tmp478 = this + _tmp477 ;
	_tmp479 = *(_tmp478) ;
	_tmp480 = _tmp479 + card ;
	_tmp481 = 4 ;
	_tmp482 = this + _tmp481 ;
	*(_tmp482) = _tmp480 ;
	_tmp483 = 12 ;
	_tmp484 = this + _tmp483 ;
	_tmp485 = *(_tmp484) ;
	_tmp486 = 12 ;
	_tmp487 = this + _tmp486 ;
	_tmp488 = *(_tmp487) ;
	_tmp489 = 1 ;
	_tmp490 = _tmp488 + _tmp489 ;
	_tmp491 = 12 ;
	_tmp492 = this + _tmp491 ;
	*(_tmp492) = _tmp490 ;
	_tmp493 = 11 ;
	_tmp494 = card == _tmp493 ;
	IfZ _tmp494 Goto _L33 ;
	_tmp495 = 8 ;
	_tmp496 = this + _tmp495 ;
	_tmp497 = *(_tmp496) ;
	_tmp498 = 8 ;
	_tmp499 = this + _tmp498 ;
	_tmp500 = *(_tmp499) ;
	_tmp501 = 1 ;
	_tmp502 = _tmp500 + _tmp501 ;
	_tmp503 = 8 ;
	_tmp504 = this + _tmp503 ;
	*(_tmp504) = _tmp502 ;
_L33:
_L34:
	_tmp505 = 4 ;
	_tmp506 = this + _tmp505 ;
	_tmp507 = *(_tmp506) ;
	_tmp508 = 21 ;
	_tmp509 = _tmp508 < _tmp507 ;
	_tmp510 = 8 ;
	_tmp511 = this + _tmp510 ;
	_tmp512 = *(_tmp511) ;
	_tmp513 = 0 ;
	_tmp514 = _tmp513 < _tmp512 ;
	_tmp515 = _tmp509 && _tmp514 ;
	IfZ _tmp515 Goto _L35 ;
	_tmp516 = 4 ;
	_tmp517 = this + _tmp516 ;
	_tmp518 = *(_tmp517) ;
	_tmp519 = 4 ;
	_tmp520 = this + _tmp519 ;
	_tmp521 = *(_tmp520) ;
	_tmp522 = 10 ;
	_tmp523 = _tmp521 - _tmp522 ;
	_tmp524 = 4 ;
	_tmp525 = this + _tmp524 ;
	*(_tmp525) = _tmp523 ;
	_tmp526 = 8 ;
	_tmp527 = this + _tmp526 ;
	_tmp528 = *(_tmp527) ;
	_tmp529 = 8 ;
	_tmp530 = this + _tmp529 ;
	_tmp531 = *(_tmp530) ;
	_tmp532 = 1 ;
	_tmp533 = _tmp531 - _tmp532 ;
	_tmp534 = 8 ;
	_tmp535 = this + _tmp534 ;
	*(_tmp535) = _tmp533 ;
	Goto _L34 ;
_L35:
	EndFunc ;
f_Player.DoubleDown:
	BeginFunc 176 ;
	_tmp536 = 4 ;
	_tmp537 = this + _tmp536 ;
	_tmp538 = *(_tmp537) ;
	_tmp539 = 10 ;
	_tmp540 = 0 ;
	_tmp541 = _tmp538 == _tmp539 ;
	_tmp542 = _tmp541 == _tmp540 ;
	_tmp543 = 4 ;
	_tmp544 = this + _tmp543 ;
	_tmp545 = *(_tmp544) ;
	_tmp546 = 11 ;
	_tmp547 = 0 ;
	_tmp548 = _tmp545 == _tmp546 ;
	_tmp549 = _tmp548 == _tmp547 ;
	_tmp550 = _tmp542 && _tmp549 ;
	IfZ _tmp550 Goto _L36 ;
	_tmp551 = 0 ;
	Return _tmp551 ;
_L36:
	_tmp552 = "Would you like to double down?" ;
	PushParam _tmp552 ;
	_tmp553 = LCall f_GetYesOrNo ;
	PopParams 4 ;
	IfZ _tmp553 Goto _L37 ;
	_tmp554 = 16 ;
	_tmp555 = this + _tmp554 ;
	_tmp556 = *(_tmp555) ;
	_tmp557 = 16 ;
	_tmp558 = this + _tmp557 ;
	_tmp559 = *(_tmp558) ;
	_tmp560 = 2 ;
	_tmp561 = _tmp559 * _tmp560 ;
	_tmp562 = 16 ;
	_tmp563 = this + _tmp562 ;
	*(_tmp563) = _tmp561 ;
	PushParam deck ;
	_tmp564 = *(this) ;
	_tmp565 = *(_tmp564) ;
	_tmp566 = ACall _tmp565 ;
	_tmp567 = this - _tmp566 ;
	_tmp568 = *(_tmp564) ;
	PushParam _tmp567 ;
	ACall _tmp568 ;
	PopParams 8 ;
	_tmp569 = 24 ;
	_tmp570 = this + _tmp569 ;
	_tmp571 = *(_tmp570) ;
	PushParam _tmp571 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp572 = ", your total is " ;
	PushParam _tmp572 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp573 = 4 ;
	_tmp574 = this + _tmp573 ;
	_tmp575 = *(_tmp574) ;
	PushParam _tmp575 ;
	LCall _PrintInt ;
	PopParams 4 ;
	_tmp576 = ".\n" ;
	PushParam _tmp576 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp577 = 1 ;
	Return _tmp577 ;
_L37:
	_tmp578 = 0 ;
	Return _tmp578 ;
	EndFunc ;
f_Player.TakeTurn:
	BeginFunc 348 ;
	_tmp579 = "\n" ;
	PushParam _tmp579 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp580 = 24 ;
	_tmp581 = this + _tmp580 ;
	_tmp582 = *(_tmp581) ;
	PushParam _tmp582 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp583 = "'s turn.\n" ;
	PushParam _tmp583 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp584 = 4 ;
	_tmp585 = this + _tmp584 ;
	_tmp586 = *(_tmp585) ;
	_tmp587 = 0 ;
	_tmp588 = 4 ;
	_tmp589 = this + _tmp588 ;
	*(_tmp589) = _tmp587 ;
	_tmp590 = 8 ;
	_tmp591 = this + _tmp590 ;
	_tmp592 = *(_tmp591) ;
	_tmp593 = 0 ;
	_tmp594 = 8 ;
	_tmp595 = this + _tmp594 ;
	*(_tmp595) = _tmp593 ;
	_tmp596 = 12 ;
	_tmp597 = this + _tmp596 ;
	_tmp598 = *(_tmp597) ;
	_tmp599 = 0 ;
	_tmp600 = 12 ;
	_tmp601 = this + _tmp600 ;
	*(_tmp601) = _tmp599 ;
	PushParam deck ;
	_tmp602 = *(this) ;
	_tmp603 = *(_tmp602) ;
	_tmp604 = ACall _tmp603 ;
	_tmp605 = this - _tmp604 ;
	_tmp606 = *(_tmp602) ;
	PushParam _tmp605 ;
	ACall _tmp606 ;
	PopParams 8 ;
	PushParam deck ;
	_tmp607 = *(this) ;
	_tmp608 = *(_tmp607) ;
	_tmp609 = ACall _tmp608 ;
	_tmp610 = this - _tmp609 ;
	_tmp611 = *(_tmp607) ;
	PushParam _tmp610 ;
	ACall _tmp611 ;
	PopParams 8 ;
	PushParam deck ;
	_tmp612 = *(this) ;
	_tmp613 = *(_tmp612) ;
	_tmp614 = ACall _tmp613 ;
	_tmp615 = this - _tmp614 ;
	_tmp616 = *(_tmp612) ;
	PushParam _tmp615 ;
	_tmp617 = ACall _tmp616 ;
	PopParams 8 ;
	_tmp618 = 0 ;
	_tmp619 = _tmp617 == _tmp618 ;
	IfZ _tmp619 Goto _L38 ;
	_tmp620 = 1 ;
	stillGoing = _tmp620 ;
_L39:
	_tmp621 = 4 ;
	_tmp622 = this + _tmp621 ;
	_tmp623 = *(_tmp622) ;
	_tmp624 = 21 ;
	_tmp625 = _tmp623 == _tmp624 ;
	_tmp626 = _tmp623 < _tmp624 ;
	_tmp627 = _tmp626 || _tmp625 ;
	_tmp628 = _tmp627 && stillGoing ;
	IfZ _tmp628 Goto _L40 ;
	_tmp629 = 24 ;
	_tmp630 = this + _tmp629 ;
	_tmp631 = *(_tmp630) ;
	PushParam _tmp631 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp632 = ", your total is " ;
	PushParam _tmp632 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp633 = 4 ;
	_tmp634 = this + _tmp633 ;
	_tmp635 = *(_tmp634) ;
	PushParam _tmp635 ;
	LCall _PrintInt ;
	PopParams 4 ;
	_tmp636 = ".\n" ;
	PushParam _tmp636 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp637 = "Would you like a hit?" ;
	PushParam _tmp637 ;
	_tmp638 = LCall f_GetYesOrNo ;
	PopParams 4 ;
	stillGoing = _tmp638 ;
	IfZ stillGoing Goto _L41 ;
	PushParam deck ;
	_tmp639 = *(this) ;
	_tmp640 = *(_tmp639) ;
	_tmp641 = ACall _tmp640 ;
	_tmp642 = this - _tmp641 ;
	_tmp643 = *(_tmp639) ;
	PushParam _tmp642 ;
	ACall _tmp643 ;
	PopParams 8 ;
_L41:
	Goto _L39 ;
_L40:
_L38:
	_tmp644 = 4 ;
	_tmp645 = this + _tmp644 ;
	_tmp646 = *(_tmp645) ;
	_tmp647 = 21 ;
	_tmp648 = _tmp647 < _tmp646 ;
	IfZ _tmp648 Goto _L43 ;
	_tmp649 = 24 ;
	_tmp650 = this + _tmp649 ;
	_tmp651 = *(_tmp650) ;
	PushParam _tmp651 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp652 = " busts with the big " ;
	PushParam _tmp652 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp653 = 4 ;
	_tmp654 = this + _tmp653 ;
	_tmp655 = *(_tmp654) ;
	PushParam _tmp655 ;
	LCall _PrintInt ;
	PopParams 4 ;
	_tmp656 = "!\n" ;
	PushParam _tmp656 ;
	LCall _PrintString ;
	PopParams 4 ;
	Goto _L42 ;
_L43:
	_tmp657 = 24 ;
	_tmp658 = this + _tmp657 ;
	_tmp659 = *(_tmp658) ;
	PushParam _tmp659 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp660 = " stays at " ;
	PushParam _tmp660 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp661 = 4 ;
	_tmp662 = this + _tmp661 ;
	_tmp663 = *(_tmp662) ;
	PushParam _tmp663 ;
	LCall _PrintInt ;
	PopParams 4 ;
	_tmp664 = ".\n" ;
	PushParam _tmp664 ;
	LCall _PrintString ;
	PopParams 4 ;
_L42:
	EndFunc ;
f_Player.HasMoney:
	BeginFunc 20 ;
	_tmp665 = 20 ;
	_tmp666 = this + _tmp665 ;
	_tmp667 = *(_tmp666) ;
	_tmp668 = 0 ;
	_tmp669 = _tmp668 < _tmp667 ;
	Return _tmp669 ;
	EndFunc ;
f_Player.PrintMoney:
	BeginFunc 32 ;
	_tmp670 = 24 ;
	_tmp671 = this + _tmp670 ;
	_tmp672 = *(_tmp671) ;
	PushParam _tmp672 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp673 = ", you have $" ;
	PushParam _tmp673 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp674 = 20 ;
	_tmp675 = this + _tmp674 ;
	_tmp676 = *(_tmp675) ;
	PushParam _tmp676 ;
	LCall _PrintInt ;
	PopParams 4 ;
	_tmp677 = ".\n" ;
	PushParam _tmp677 ;
	LCall _PrintString ;
	PopParams 4 ;
	EndFunc ;
f_Player.PlaceBet:
	BeginFunc 132 ;
	_tmp678 = 16 ;
	_tmp679 = this + _tmp678 ;
	_tmp680 = *(_tmp679) ;
	_tmp681 = 0 ;
	_tmp682 = 16 ;
	_tmp683 = this + _tmp682 ;
	*(_tmp683) = _tmp681 ;
	_tmp684 = *(this) ;
	_tmp685 = *(_tmp684) ;
	_tmp686 = ACall _tmp685 ;
	_tmp687 = this - _tmp686 ;
	_tmp688 = *(_tmp684) ;
	PushParam _tmp687 ;
	ACall _tmp688 ;
	PopParams 4 ;
_L44:
	_tmp689 = 16 ;
	_tmp690 = this + _tmp689 ;
	_tmp691 = *(_tmp690) ;
	_tmp692 = 0 ;
	_tmp693 = _tmp691 == _tmp692 ;
	_tmp694 = _tmp691 < _tmp692 ;
	_tmp695 = _tmp694 || _tmp693 ;
	_tmp696 = 16 ;
	_tmp697 = this + _tmp696 ;
	_tmp698 = *(_tmp697) ;
	_tmp699 = 20 ;
	_tmp700 = this + _tmp699 ;
	_tmp701 = *(_tmp700) ;
	_tmp702 = _tmp701 < _tmp698 ;
	_tmp703 = _tmp695 || _tmp702 ;
	IfZ _tmp703 Goto _L45 ;
	_tmp704 = "How much would you like to bet? " ;
	PushParam _tmp704 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp705 = 16 ;
	_tmp706 = this + _tmp705 ;
	_tmp707 = *(_tmp706) ;
	_tmp708 = LCall _ReadInteger ;
	_tmp709 = 16 ;
	_tmp710 = this + _tmp709 ;
	*(_tmp710) = _tmp708 ;
	Goto _L44 ;
_L45:
	EndFunc ;
f_Player.GetTotal:
	BeginFunc 12 ;
	_tmp711 = 4 ;
	_tmp712 = this + _tmp711 ;
	_tmp713 = *(_tmp712) ;
	Return _tmp713 ;
	EndFunc ;
f_Player.Resolve:
	BeginFunc 324 ;
	_tmp714 = 0 ;
	win = _tmp714 ;
	_tmp715 = 0 ;
	lose = _tmp715 ;
	_tmp716 = 4 ;
	_tmp717 = this + _tmp716 ;
	_tmp718 = *(_tmp717) ;
	_tmp719 = 21 ;
	_tmp720 = _tmp718 == _tmp719 ;
	_tmp721 = 12 ;
	_tmp722 = this + _tmp721 ;
	_tmp723 = *(_tmp722) ;
	_tmp724 = 2 ;
	_tmp725 = _tmp723 == _tmp724 ;
	_tmp726 = _tmp720 && _tmp725 ;
	IfZ _tmp726 Goto _L47 ;
	_tmp727 = 2 ;
	win = _tmp727 ;
	Goto _L46 ;
_L47:
	_tmp728 = 4 ;
	_tmp729 = this + _tmp728 ;
	_tmp730 = *(_tmp729) ;
	_tmp731 = 21 ;
	_tmp732 = _tmp731 < _tmp730 ;
	IfZ _tmp732 Goto _L49 ;
	_tmp733 = 1 ;
	lose = _tmp733 ;
	Goto _L48 ;
_L49:
	_tmp734 = 21 ;
	_tmp735 = _tmp734 < dealer ;
	IfZ _tmp735 Goto _L51 ;
	_tmp736 = 1 ;
	win = _tmp736 ;
	Goto _L50 ;
_L51:
	_tmp737 = 4 ;
	_tmp738 = this + _tmp737 ;
	_tmp739 = *(_tmp738) ;
	_tmp740 = dealer < _tmp739 ;
	IfZ _tmp740 Goto _L53 ;
	_tmp741 = 1 ;
	win = _tmp741 ;
	Goto _L52 ;
_L53:
	_tmp742 = 4 ;
	_tmp743 = this + _tmp742 ;
	_tmp744 = *(_tmp743) ;
	_tmp745 = _tmp744 < dealer ;
	IfZ _tmp745 Goto _L54 ;
	_tmp746 = 1 ;
	lose = _tmp746 ;
_L54:
_L52:
_L50:
_L48:
_L46:
	_tmp747 = 1 ;
	_tmp748 = win == _tmp747 ;
	_tmp749 = _tmp747 < win ;
	_tmp750 = _tmp749 || _tmp748 ;
	IfZ _tmp750 Goto _L56 ;
	_tmp751 = 24 ;
	_tmp752 = this + _tmp751 ;
	_tmp753 = *(_tmp752) ;
	PushParam _tmp753 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp754 = ", you won $" ;
	PushParam _tmp754 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp755 = 16 ;
	_tmp756 = this + _tmp755 ;
	_tmp757 = *(_tmp756) ;
	PushParam _tmp757 ;
	LCall _PrintInt ;
	PopParams 4 ;
	_tmp758 = ".\n" ;
	PushParam _tmp758 ;
	LCall _PrintString ;
	PopParams 4 ;
	Goto _L55 ;
_L56:
	_tmp759 = 1 ;
	_tmp760 = lose == _tmp759 ;
	_tmp761 = _tmp759 < lose ;
	_tmp762 = _tmp761 || _tmp760 ;
	IfZ _tmp762 Goto _L58 ;
	_tmp763 = 24 ;
	_tmp764 = this + _tmp763 ;
	_tmp765 = *(_tmp764) ;
	PushParam _tmp765 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp766 = ", you lost $" ;
	PushParam _tmp766 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp767 = 16 ;
	_tmp768 = this + _tmp767 ;
	_tmp769 = *(_tmp768) ;
	PushParam _tmp769 ;
	LCall _PrintInt ;
	PopParams 4 ;
	_tmp770 = ".\n" ;
	PushParam _tmp770 ;
	LCall _PrintString ;
	PopParams 4 ;
	Goto _L57 ;
_L58:
	_tmp771 = 24 ;
	_tmp772 = this + _tmp771 ;
	_tmp773 = *(_tmp772) ;
	PushParam _tmp773 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp774 = ", you push!\n" ;
	PushParam _tmp774 ;
	LCall _PrintString ;
	PopParams 4 ;
_L57:
_L55:
	_tmp775 = 16 ;
	_tmp776 = this + _tmp775 ;
	_tmp777 = *(_tmp776) ;
	_tmp778 = win * _tmp777 ;
	win = _tmp778 ;
	_tmp779 = 16 ;
	_tmp780 = this + _tmp779 ;
	_tmp781 = *(_tmp780) ;
	_tmp782 = lose * _tmp781 ;
	lose = _tmp782 ;
	_tmp783 = 20 ;
	_tmp784 = this + _tmp783 ;
	_tmp785 = *(_tmp784) ;
	_tmp786 = 20 ;
	_tmp787 = this + _tmp786 ;
	_tmp788 = *(_tmp787) ;
	_tmp789 = _tmp788 + win ;
	_tmp790 = _tmp789 - lose ;
	_tmp791 = 20 ;
	_tmp792 = this + _tmp791 ;
	*(_tmp792) = _tmp790 ;
	EndFunc ;
_offset_Dealer_0:
	BeginFunc 4 ;
	_tmp793 = 0 ;
	Return _tmp793 ;
	EndFunc ;
VTable Dealer =
	_offset_Dealer_0,
	f_Dealer.Init,
	f_Dealer.Hit,
	f_Dealer.DoubleDown,
	f_Dealer.TakeTurn,
	f_Dealer.HasMoney,
	f_Dealer.PrintMoney,
	f_Dealer.PlaceBet,
	f_Dealer.GetTotal,
	f_Dealer.Resolve,
; 
f_Dealer.Init:
	BeginFunc 96 ;
	_tmp794 = 4 ;
	_tmp795 = this + _tmp794 ;
	_tmp796 = *(_tmp795) ;
	_tmp797 = 0 ;
	_tmp798 = 4 ;
	_tmp799 = this + _tmp798 ;
	*(_tmp799) = _tmp797 ;
	_tmp800 = 8 ;
	_tmp801 = this + _tmp800 ;
	_tmp802 = *(_tmp801) ;
	_tmp803 = 0 ;
	_tmp804 = 8 ;
	_tmp805 = this + _tmp804 ;
	*(_tmp805) = _tmp803 ;
	_tmp806 = 12 ;
	_tmp807 = this + _tmp806 ;
	_tmp808 = *(_tmp807) ;
	_tmp809 = 0 ;
	_tmp810 = 12 ;
	_tmp811 = this + _tmp810 ;
	*(_tmp811) = _tmp809 ;
	_tmp812 = 24 ;
	_tmp813 = this + _tmp812 ;
	_tmp814 = *(_tmp813) ;
	_tmp815 = "Dealer" ;
	_tmp816 = 24 ;
	_tmp817 = this + _tmp816 ;
	*(_tmp817) = _tmp815 ;
	EndFunc ;
f_Dealer.TakeTurn:
	BeginFunc 152 ;
	_tmp818 = "\n" ;
	PushParam _tmp818 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp819 = 24 ;
	_tmp820 = this + _tmp819 ;
	_tmp821 = *(_tmp820) ;
	PushParam _tmp821 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp822 = "'s turn.\n" ;
	PushParam _tmp822 ;
	LCall _PrintString ;
	PopParams 4 ;
_L59:
	_tmp823 = 4 ;
	_tmp824 = this + _tmp823 ;
	_tmp825 = *(_tmp824) ;
	_tmp826 = 16 ;
	_tmp827 = _tmp825 == _tmp826 ;
	_tmp828 = _tmp825 < _tmp826 ;
	_tmp829 = _tmp828 || _tmp827 ;
	IfZ _tmp829 Goto _L60 ;
	PushParam deck ;
	_tmp830 = *(this) ;
	_tmp831 = *(_tmp830) ;
	_tmp832 = ACall _tmp831 ;
	_tmp833 = this - _tmp832 ;
	_tmp834 = *(_tmp830 + 8) ;
	PushParam _tmp833 ;
	ACall _tmp834 ;
	PopParams 8 ;
	Goto _L59 ;
_L60:
	_tmp835 = 4 ;
	_tmp836 = this + _tmp835 ;
	_tmp837 = *(_tmp836) ;
	_tmp838 = 21 ;
	_tmp839 = _tmp838 < _tmp837 ;
	IfZ _tmp839 Goto _L62 ;
	_tmp840 = 24 ;
	_tmp841 = this + _tmp840 ;
	_tmp842 = *(_tmp841) ;
	PushParam _tmp842 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp843 = " busts with the big " ;
	PushParam _tmp843 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp844 = 4 ;
	_tmp845 = this + _tmp844 ;
	_tmp846 = *(_tmp845) ;
	PushParam _tmp846 ;
	LCall _PrintInt ;
	PopParams 4 ;
	_tmp847 = "!\n" ;
	PushParam _tmp847 ;
	LCall _PrintString ;
	PopParams 4 ;
	Goto _L61 ;
_L62:
	_tmp848 = 24 ;
	_tmp849 = this + _tmp848 ;
	_tmp850 = *(_tmp849) ;
	PushParam _tmp850 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp851 = " stays at " ;
	PushParam _tmp851 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp852 = 4 ;
	_tmp853 = this + _tmp852 ;
	_tmp854 = *(_tmp853) ;
	PushParam _tmp854 ;
	LCall _PrintInt ;
	PopParams 4 ;
	_tmp855 = ".\n" ;
	PushParam _tmp855 ;
	LCall _PrintString ;
	PopParams 4 ;
_L61:
	EndFunc ;
f_Dealer.Hit:
	BeginFunc 296 ;
	_tmp856 = *(deck) ;
	_tmp857 = *(_tmp856) ;
	_tmp858 = ACall _tmp857 ;
	_tmp859 = deck - _tmp858 ;
	_tmp860 = *(_tmp856 + 8) ;
	PushParam _tmp859 ;
	_tmp861 = ACall _tmp860 ;
	PopParams 4 ;
	card = _tmp861 ;
	_tmp862 = 24 ;
	_tmp863 = this + _tmp862 ;
	_tmp864 = *(_tmp863) ;
	PushParam _tmp864 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp865 = " was dealt a " ;
	PushParam _tmp865 ;
	LCall _PrintString ;
	PopParams 4 ;
	PushParam card ;
	LCall _PrintInt ;
	PopParams 4 ;
	_tmp866 = ".\n" ;
	PushParam _tmp866 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp867 = 4 ;
	_tmp868 = this + _tmp867 ;
	_tmp869 = *(_tmp868) ;
	_tmp870 = 4 ;
	_tmp871 = this + _tmp870 ;
	_tmp872 = *(_tmp871) ;
	_tmp873 = _tmp872 + card ;
	_tmp874 = 4 ;
	_tmp875 = this + _tmp874 ;
	*(_tmp875) = _tmp873 ;
	_tmp876 = 12 ;
	_tmp877 = this + _tmp876 ;
	_tmp878 = *(_tmp877) ;
	_tmp879 = 12 ;
	_tmp880 = this + _tmp879 ;
	_tmp881 = *(_tmp880) ;
	_tmp882 = 1 ;
	_tmp883 = _tmp881 + _tmp882 ;
	_tmp884 = 12 ;
	_tmp885 = this + _tmp884 ;
	*(_tmp885) = _tmp883 ;
	_tmp886 = 11 ;
	_tmp887 = card == _tmp886 ;
	IfZ _tmp887 Goto _L63 ;
	_tmp888 = 8 ;
	_tmp889 = this + _tmp888 ;
	_tmp890 = *(_tmp889) ;
	_tmp891 = 8 ;
	_tmp892 = this + _tmp891 ;
	_tmp893 = *(_tmp892) ;
	_tmp894 = 1 ;
	_tmp895 = _tmp893 + _tmp894 ;
	_tmp896 = 8 ;
	_tmp897 = this + _tmp896 ;
	*(_tmp897) = _tmp895 ;
_L63:
_L64:
	_tmp898 = 4 ;
	_tmp899 = this + _tmp898 ;
	_tmp900 = *(_tmp899) ;
	_tmp901 = 21 ;
	_tmp902 = _tmp901 < _tmp900 ;
	_tmp903 = 8 ;
	_tmp904 = this + _tmp903 ;
	_tmp905 = *(_tmp904) ;
	_tmp906 = 0 ;
	_tmp907 = _tmp906 < _tmp905 ;
	_tmp908 = _tmp902 && _tmp907 ;
	IfZ _tmp908 Goto _L65 ;
	_tmp909 = 4 ;
	_tmp910 = this + _tmp909 ;
	_tmp911 = *(_tmp910) ;
	_tmp912 = 4 ;
	_tmp913 = this + _tmp912 ;
	_tmp914 = *(_tmp913) ;
	_tmp915 = 10 ;
	_tmp916 = _tmp914 - _tmp915 ;
	_tmp917 = 4 ;
	_tmp918 = this + _tmp917 ;
	*(_tmp918) = _tmp916 ;
	_tmp919 = 8 ;
	_tmp920 = this + _tmp919 ;
	_tmp921 = *(_tmp920) ;
	_tmp922 = 8 ;
	_tmp923 = this + _tmp922 ;
	_tmp924 = *(_tmp923) ;
	_tmp925 = 1 ;
	_tmp926 = _tmp924 - _tmp925 ;
	_tmp927 = 8 ;
	_tmp928 = this + _tmp927 ;
	*(_tmp928) = _tmp926 ;
	Goto _L64 ;
_L65:
	EndFunc ;
f_Dealer.DoubleDown:
	BeginFunc 176 ;
	_tmp929 = 4 ;
	_tmp930 = this + _tmp929 ;
	_tmp931 = *(_tmp930) ;
	_tmp932 = 10 ;
	_tmp933 = 0 ;
	_tmp934 = _tmp931 == _tmp932 ;
	_tmp935 = _tmp934 == _tmp933 ;
	_tmp936 = 4 ;
	_tmp937 = this + _tmp936 ;
	_tmp938 = *(_tmp937) ;
	_tmp939 = 11 ;
	_tmp940 = 0 ;
	_tmp941 = _tmp938 == _tmp939 ;
	_tmp942 = _tmp941 == _tmp940 ;
	_tmp943 = _tmp935 && _tmp942 ;
	IfZ _tmp943 Goto _L66 ;
	_tmp944 = 0 ;
	Return _tmp944 ;
_L66:
	_tmp945 = "Would you like to double down?" ;
	PushParam _tmp945 ;
	_tmp946 = LCall f_GetYesOrNo ;
	PopParams 4 ;
	IfZ _tmp946 Goto _L67 ;
	_tmp947 = 16 ;
	_tmp948 = this + _tmp947 ;
	_tmp949 = *(_tmp948) ;
	_tmp950 = 16 ;
	_tmp951 = this + _tmp950 ;
	_tmp952 = *(_tmp951) ;
	_tmp953 = 2 ;
	_tmp954 = _tmp952 * _tmp953 ;
	_tmp955 = 16 ;
	_tmp956 = this + _tmp955 ;
	*(_tmp956) = _tmp954 ;
	PushParam deck ;
	_tmp957 = *(this) ;
	_tmp958 = *(_tmp957) ;
	_tmp959 = ACall _tmp958 ;
	_tmp960 = this - _tmp959 ;
	_tmp961 = *(_tmp957) ;
	PushParam _tmp960 ;
	ACall _tmp961 ;
	PopParams 8 ;
	_tmp962 = 24 ;
	_tmp963 = this + _tmp962 ;
	_tmp964 = *(_tmp963) ;
	PushParam _tmp964 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp965 = ", your total is " ;
	PushParam _tmp965 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp966 = 4 ;
	_tmp967 = this + _tmp966 ;
	_tmp968 = *(_tmp967) ;
	PushParam _tmp968 ;
	LCall _PrintInt ;
	PopParams 4 ;
	_tmp969 = ".\n" ;
	PushParam _tmp969 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp970 = 1 ;
	Return _tmp970 ;
_L67:
	_tmp971 = 0 ;
	Return _tmp971 ;
	EndFunc ;
f_Dealer.HasMoney:
	BeginFunc 20 ;
	_tmp972 = 20 ;
	_tmp973 = this + _tmp972 ;
	_tmp974 = *(_tmp973) ;
	_tmp975 = 0 ;
	_tmp976 = _tmp975 < _tmp974 ;
	Return _tmp976 ;
	EndFunc ;
f_Dealer.PrintMoney:
	BeginFunc 32 ;
	_tmp977 = 24 ;
	_tmp978 = this + _tmp977 ;
	_tmp979 = *(_tmp978) ;
	PushParam _tmp979 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp980 = ", you have $" ;
	PushParam _tmp980 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp981 = 20 ;
	_tmp982 = this + _tmp981 ;
	_tmp983 = *(_tmp982) ;
	PushParam _tmp983 ;
	LCall _PrintInt ;
	PopParams 4 ;
	_tmp984 = ".\n" ;
	PushParam _tmp984 ;
	LCall _PrintString ;
	PopParams 4 ;
	EndFunc ;
f_Dealer.PlaceBet:
	BeginFunc 132 ;
	_tmp985 = 16 ;
	_tmp986 = this + _tmp985 ;
	_tmp987 = *(_tmp986) ;
	_tmp988 = 0 ;
	_tmp989 = 16 ;
	_tmp990 = this + _tmp989 ;
	*(_tmp990) = _tmp988 ;
	_tmp991 = *(this) ;
	_tmp992 = *(_tmp991) ;
	_tmp993 = ACall _tmp992 ;
	_tmp994 = this - _tmp993 ;
	_tmp995 = *(_tmp991) ;
	PushParam _tmp994 ;
	ACall _tmp995 ;
	PopParams 4 ;
_L68:
	_tmp996 = 16 ;
	_tmp997 = this + _tmp996 ;
	_tmp998 = *(_tmp997) ;
	_tmp999 = 0 ;
	_tmp1000 = _tmp998 == _tmp999 ;
	_tmp1001 = _tmp998 < _tmp999 ;
	_tmp1002 = _tmp1001 || _tmp1000 ;
	_tmp1003 = 16 ;
	_tmp1004 = this + _tmp1003 ;
	_tmp1005 = *(_tmp1004) ;
	_tmp1006 = 20 ;
	_tmp1007 = this + _tmp1006 ;
	_tmp1008 = *(_tmp1007) ;
	_tmp1009 = _tmp1008 < _tmp1005 ;
	_tmp1010 = _tmp1002 || _tmp1009 ;
	IfZ _tmp1010 Goto _L69 ;
	_tmp1011 = "How much would you like to bet? " ;
	PushParam _tmp1011 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp1012 = 16 ;
	_tmp1013 = this + _tmp1012 ;
	_tmp1014 = *(_tmp1013) ;
	_tmp1015 = LCall _ReadInteger ;
	_tmp1016 = 16 ;
	_tmp1017 = this + _tmp1016 ;
	*(_tmp1017) = _tmp1015 ;
	Goto _L68 ;
_L69:
	EndFunc ;
f_Dealer.GetTotal:
	BeginFunc 12 ;
	_tmp1018 = 4 ;
	_tmp1019 = this + _tmp1018 ;
	_tmp1020 = *(_tmp1019) ;
	Return _tmp1020 ;
	EndFunc ;
f_Dealer.Resolve:
	BeginFunc 324 ;
	_tmp1021 = 0 ;
	win = _tmp1021 ;
	_tmp1022 = 0 ;
	lose = _tmp1022 ;
	_tmp1023 = 4 ;
	_tmp1024 = this + _tmp1023 ;
	_tmp1025 = *(_tmp1024) ;
	_tmp1026 = 21 ;
	_tmp1027 = _tmp1025 == _tmp1026 ;
	_tmp1028 = 12 ;
	_tmp1029 = this + _tmp1028 ;
	_tmp1030 = *(_tmp1029) ;
	_tmp1031 = 2 ;
	_tmp1032 = _tmp1030 == _tmp1031 ;
	_tmp1033 = _tmp1027 && _tmp1032 ;
	IfZ _tmp1033 Goto _L71 ;
	_tmp1034 = 2 ;
	win = _tmp1034 ;
	Goto _L70 ;
_L71:
	_tmp1035 = 4 ;
	_tmp1036 = this + _tmp1035 ;
	_tmp1037 = *(_tmp1036) ;
	_tmp1038 = 21 ;
	_tmp1039 = _tmp1038 < _tmp1037 ;
	IfZ _tmp1039 Goto _L73 ;
	_tmp1040 = 1 ;
	lose = _tmp1040 ;
	Goto _L72 ;
_L73:
	_tmp1041 = 21 ;
	_tmp1042 = _tmp1041 < dealer ;
	IfZ _tmp1042 Goto _L75 ;
	_tmp1043 = 1 ;
	win = _tmp1043 ;
	Goto _L74 ;
_L75:
	_tmp1044 = 4 ;
	_tmp1045 = this + _tmp1044 ;
	_tmp1046 = *(_tmp1045) ;
	_tmp1047 = dealer < _tmp1046 ;
	IfZ _tmp1047 Goto _L77 ;
	_tmp1048 = 1 ;
	win = _tmp1048 ;
	Goto _L76 ;
_L77:
	_tmp1049 = 4 ;
	_tmp1050 = this + _tmp1049 ;
	_tmp1051 = *(_tmp1050) ;
	_tmp1052 = _tmp1051 < dealer ;
	IfZ _tmp1052 Goto _L78 ;
	_tmp1053 = 1 ;
	lose = _tmp1053 ;
_L78:
_L76:
_L74:
_L72:
_L70:
	_tmp1054 = 1 ;
	_tmp1055 = win == _tmp1054 ;
	_tmp1056 = _tmp1054 < win ;
	_tmp1057 = _tmp1056 || _tmp1055 ;
	IfZ _tmp1057 Goto _L80 ;
	_tmp1058 = 24 ;
	_tmp1059 = this + _tmp1058 ;
	_tmp1060 = *(_tmp1059) ;
	PushParam _tmp1060 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp1061 = ", you won $" ;
	PushParam _tmp1061 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp1062 = 16 ;
	_tmp1063 = this + _tmp1062 ;
	_tmp1064 = *(_tmp1063) ;
	PushParam _tmp1064 ;
	LCall _PrintInt ;
	PopParams 4 ;
	_tmp1065 = ".\n" ;
	PushParam _tmp1065 ;
	LCall _PrintString ;
	PopParams 4 ;
	Goto _L79 ;
_L80:
	_tmp1066 = 1 ;
	_tmp1067 = lose == _tmp1066 ;
	_tmp1068 = _tmp1066 < lose ;
	_tmp1069 = _tmp1068 || _tmp1067 ;
	IfZ _tmp1069 Goto _L82 ;
	_tmp1070 = 24 ;
	_tmp1071 = this + _tmp1070 ;
	_tmp1072 = *(_tmp1071) ;
	PushParam _tmp1072 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp1073 = ", you lost $" ;
	PushParam _tmp1073 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp1074 = 16 ;
	_tmp1075 = this + _tmp1074 ;
	_tmp1076 = *(_tmp1075) ;
	PushParam _tmp1076 ;
	LCall _PrintInt ;
	PopParams 4 ;
	_tmp1077 = ".\n" ;
	PushParam _tmp1077 ;
	LCall _PrintString ;
	PopParams 4 ;
	Goto _L81 ;
_L82:
	_tmp1078 = 24 ;
	_tmp1079 = this + _tmp1078 ;
	_tmp1080 = *(_tmp1079) ;
	PushParam _tmp1080 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp1081 = ", you push!\n" ;
	PushParam _tmp1081 ;
	LCall _PrintString ;
	PopParams 4 ;
_L81:
_L79:
	_tmp1082 = 16 ;
	_tmp1083 = this + _tmp1082 ;
	_tmp1084 = *(_tmp1083) ;
	_tmp1085 = win * _tmp1084 ;
	win = _tmp1085 ;
	_tmp1086 = 16 ;
	_tmp1087 = this + _tmp1086 ;
	_tmp1088 = *(_tmp1087) ;
	_tmp1089 = lose * _tmp1088 ;
	lose = _tmp1089 ;
	_tmp1090 = 20 ;
	_tmp1091 = this + _tmp1090 ;
	_tmp1092 = *(_tmp1091) ;
	_tmp1093 = 20 ;
	_tmp1094 = this + _tmp1093 ;
	_tmp1095 = *(_tmp1094) ;
	_tmp1096 = _tmp1095 + win ;
	_tmp1097 = _tmp1096 - lose ;
	_tmp1098 = 20 ;
	_tmp1099 = this + _tmp1098 ;
	*(_tmp1099) = _tmp1097 ;
	EndFunc ;
_offset_House_0:
	BeginFunc 4 ;
	_tmp1100 = 0 ;
	Return _tmp1100 ;
	EndFunc ;
VTable House =
	_offset_House_0,
	f_House.SetupGame,
	f_House.SetupPlayers,
	f_House.TakeAllBets,
	f_House.TakeAllTurns,
	f_House.ResolveAllPlayers,
	f_House.PrintAllMoney,
	f_House.PlayOneGame,
; 
f_House.SetupGame:
	BeginFunc 176 ;
	_tmp1101 = "\nWelcome to CS143 BlackJack!\n" ;
	PushParam _tmp1101 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp1102 = "---------------------------\n" ;
	PushParam _tmp1102 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp1103 = 8 ;
	PushParam _tmp1103 ;
	_tmp1104 = LCall _Alloc ;
	PopParams 4 ;
	_tmp1105 = Random ;
	*(_tmp1104) = _tmp1105 ;
	gRnd = _tmp1104 ;
	_tmp1106 = "Please enter a random number seed: " ;
	PushParam _tmp1106 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp1107 = LCall _ReadInteger ;
	PushParam _tmp1107 ;
	_tmp1108 = *(gRnd) ;
	_tmp1109 = *(_tmp1108) ;
	_tmp1110 = ACall _tmp1109 ;
	_tmp1111 = gRnd - _tmp1110 ;
	_tmp1112 = *(_tmp1108 + 4) ;
	PushParam _tmp1111 ;
	ACall _tmp1112 ;
	PopParams 8 ;
	_tmp1113 = 12 ;
	_tmp1114 = this + _tmp1113 ;
	_tmp1115 = *(_tmp1114) ;
	_tmp1116 = 12 ;
	PushParam _tmp1116 ;
	_tmp1117 = LCall _Alloc ;
	PopParams 4 ;
	_tmp1118 = BJDeck ;
	*(_tmp1117) = _tmp1118 ;
	_tmp1119 = 12 ;
	_tmp1120 = this + _tmp1119 ;
	*(_tmp1120) = _tmp1117 ;
	_tmp1121 = 8 ;
	_tmp1122 = this + _tmp1121 ;
	_tmp1123 = *(_tmp1122) ;
	_tmp1124 = 28 ;
	PushParam _tmp1124 ;
	_tmp1125 = LCall _Alloc ;
	PopParams 4 ;
	_tmp1126 = Dealer ;
	*(_tmp1125) = _tmp1126 ;
	_tmp1127 = 8 ;
	_tmp1128 = this + _tmp1127 ;
	*(_tmp1128) = _tmp1125 ;
	_tmp1129 = 12 ;
	_tmp1130 = this + _tmp1129 ;
	_tmp1131 = *(_tmp1130) ;
	_tmp1132 = *(_tmp1131) ;
	_tmp1133 = *(_tmp1132) ;
	_tmp1134 = ACall _tmp1133 ;
	_tmp1135 = _tmp1131 - _tmp1134 ;
	_tmp1136 = *(_tmp1132 + 4) ;
	PushParam _tmp1135 ;
	ACall _tmp1136 ;
	PopParams 4 ;
	_tmp1137 = 12 ;
	_tmp1138 = this + _tmp1137 ;
	_tmp1139 = *(_tmp1138) ;
	_tmp1140 = *(_tmp1139) ;
	_tmp1141 = *(_tmp1140) ;
	_tmp1142 = ACall _tmp1141 ;
	_tmp1143 = _tmp1139 - _tmp1142 ;
	_tmp1144 = *(_tmp1140 + 12) ;
	PushParam _tmp1143 ;
	ACall _tmp1144 ;
	PopParams 4 ;
	EndFunc ;
f_House.SetupPlayers:
	BeginFunc 324 ;
	_tmp1145 = "How many players do we have today? " ;
	PushParam _tmp1145 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp1146 = LCall _ReadInteger ;
	numPlayers = _tmp1146 ;
	_tmp1147 = 4 ;
	_tmp1148 = this + _tmp1147 ;
	_tmp1149 = *(_tmp1148) ;
	_tmp1150 = 0 ;
	_tmp1151 = 4 ;
	_tmp1152 = _tmp1150 < numPlayers ;
	IfZ _tmp1152 Goto _L83 ;
	Goto _L84 ;
_L83:
	_tmp1153 = "Decaf runtime error: Array size is <= 0\n" ;
	PushParam _tmp1153 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L84:
	_tmp1154 = numPlayers * _tmp1151 ;
	_tmp1155 = _tmp1154 + _tmp1151 ;
	PushParam _tmp1155 ;
	_tmp1156 = LCall _Alloc ;
	PopParams 4 ;
	*(_tmp1156) = numPlayers ;
	_tmp1157 = 4 ;
	_tmp1158 = this + _tmp1157 ;
	*(_tmp1158) = _tmp1156 ;
	_tmp1159 = 0 ;
	i = _tmp1159 ;
_L85:
	_tmp1160 = 4 ;
	_tmp1161 = this + _tmp1160 ;
	_tmp1162 = *(_tmp1161) ;
	_tmp1163 = *(_tmp1162) ;
	_tmp1164 = i < _tmp1163 ;
	IfZ _tmp1164 Goto _L86 ;
	_tmp1165 = 4 ;
	_tmp1166 = this + _tmp1165 ;
	_tmp1167 = *(_tmp1166) ;
	_tmp1168 = 0 ;
	_tmp1169 = 4 ;
	_tmp1170 = *(_tmp1167) ;
	_tmp1171 = _tmp1170 == i ;
	_tmp1172 = _tmp1170 < i ;
	_tmp1173 = _tmp1172 || _tmp1171 ;
	_tmp1174 = i < _tmp1168 ;
	_tmp1175 = _tmp1174 || _tmp1173 ;
	IfZ _tmp1175 Goto _L87 ;
	_tmp1176 = "Decaf runtime error: Array subscript out of bound..." ;
	PushParam _tmp1176 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L87:
	_tmp1177 = i * _tmp1169 ;
	_tmp1178 = _tmp1177 + _tmp1169 ;
	_tmp1179 = _tmp1167 + _tmp1178 ;
	_tmp1180 = *(_tmp1179) ;
	_tmp1181 = 28 ;
	PushParam _tmp1181 ;
	_tmp1182 = LCall _Alloc ;
	PopParams 4 ;
	_tmp1183 = Player ;
	*(_tmp1182) = _tmp1183 ;
	_tmp1184 = 4 ;
	_tmp1185 = this + _tmp1184 ;
	_tmp1186 = *(_tmp1185) ;
	_tmp1187 = 0 ;
	_tmp1188 = 4 ;
	_tmp1189 = *(_tmp1186) ;
	_tmp1190 = _tmp1189 == i ;
	_tmp1191 = _tmp1189 < i ;
	_tmp1192 = _tmp1191 || _tmp1190 ;
	_tmp1193 = i < _tmp1187 ;
	_tmp1194 = _tmp1193 || _tmp1192 ;
	IfZ _tmp1194 Goto _L88 ;
	_tmp1195 = "Decaf runtime error: Array subscript out of bound..." ;
	PushParam _tmp1195 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L88:
	_tmp1196 = i * _tmp1188 ;
	_tmp1197 = _tmp1196 + _tmp1188 ;
	_tmp1198 = _tmp1186 + _tmp1197 ;
	*(_tmp1198) = _tmp1182 ;
	_tmp1199 = 4 ;
	_tmp1200 = this + _tmp1199 ;
	_tmp1201 = *(_tmp1200) ;
	_tmp1202 = 0 ;
	_tmp1203 = 4 ;
	_tmp1204 = *(_tmp1201) ;
	_tmp1205 = _tmp1204 == i ;
	_tmp1206 = _tmp1204 < i ;
	_tmp1207 = _tmp1206 || _tmp1205 ;
	_tmp1208 = i < _tmp1202 ;
	_tmp1209 = _tmp1208 || _tmp1207 ;
	IfZ _tmp1209 Goto _L89 ;
	_tmp1210 = "Decaf runtime error: Array subscript out of bound..." ;
	PushParam _tmp1210 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L89:
	_tmp1211 = i * _tmp1203 ;
	_tmp1212 = _tmp1211 + _tmp1203 ;
	_tmp1213 = _tmp1201 + _tmp1212 ;
	_tmp1214 = *(_tmp1213) ;
	_tmp1215 = 1 ;
	_tmp1216 = i + _tmp1215 ;
	PushParam _tmp1216 ;
	_tmp1217 = *(_tmp1214) ;
	_tmp1218 = *(_tmp1217) ;
	_tmp1219 = ACall _tmp1218 ;
	_tmp1220 = _tmp1214 - _tmp1219 ;
	_tmp1221 = *(_tmp1217 + 4) ;
	PushParam _tmp1220 ;
	ACall _tmp1221 ;
	PopParams 8 ;
	_tmp1222 = 1 ;
	_tmp1223 = i + _tmp1222 ;
	i = _tmp1223 ;
	Goto _L85 ;
_L86:
	EndFunc ;
f_House.TakeAllBets:
	BeginFunc 212 ;
	_tmp1224 = "\nFirst, let's take bets.\n" ;
	PushParam _tmp1224 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp1225 = 0 ;
	i = _tmp1225 ;
_L90:
	_tmp1226 = 4 ;
	_tmp1227 = this + _tmp1226 ;
	_tmp1228 = *(_tmp1227) ;
	_tmp1229 = *(_tmp1228) ;
	_tmp1230 = i < _tmp1229 ;
	IfZ _tmp1230 Goto _L91 ;
	_tmp1231 = 4 ;
	_tmp1232 = this + _tmp1231 ;
	_tmp1233 = *(_tmp1232) ;
	_tmp1234 = 0 ;
	_tmp1235 = 4 ;
	_tmp1236 = *(_tmp1233) ;
	_tmp1237 = _tmp1236 == i ;
	_tmp1238 = _tmp1236 < i ;
	_tmp1239 = _tmp1238 || _tmp1237 ;
	_tmp1240 = i < _tmp1234 ;
	_tmp1241 = _tmp1240 || _tmp1239 ;
	IfZ _tmp1241 Goto _L92 ;
	_tmp1242 = "Decaf runtime error: Array subscript out of bound..." ;
	PushParam _tmp1242 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L92:
	_tmp1243 = i * _tmp1235 ;
	_tmp1244 = _tmp1243 + _tmp1235 ;
	_tmp1245 = _tmp1233 + _tmp1244 ;
	_tmp1246 = *(_tmp1245) ;
	_tmp1247 = *(_tmp1246) ;
	_tmp1248 = *(_tmp1247) ;
	_tmp1249 = ACall _tmp1248 ;
	_tmp1250 = _tmp1246 - _tmp1249 ;
	_tmp1251 = *(_tmp1247 + 20) ;
	PushParam _tmp1250 ;
	_tmp1252 = ACall _tmp1251 ;
	PopParams 4 ;
	IfZ _tmp1252 Goto _L93 ;
	_tmp1253 = 4 ;
	_tmp1254 = this + _tmp1253 ;
	_tmp1255 = *(_tmp1254) ;
	_tmp1256 = 0 ;
	_tmp1257 = 4 ;
	_tmp1258 = *(_tmp1255) ;
	_tmp1259 = _tmp1258 == i ;
	_tmp1260 = _tmp1258 < i ;
	_tmp1261 = _tmp1260 || _tmp1259 ;
	_tmp1262 = i < _tmp1256 ;
	_tmp1263 = _tmp1262 || _tmp1261 ;
	IfZ _tmp1263 Goto _L94 ;
	_tmp1264 = "Decaf runtime error: Array subscript out of bound..." ;
	PushParam _tmp1264 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L94:
	_tmp1265 = i * _tmp1257 ;
	_tmp1266 = _tmp1265 + _tmp1257 ;
	_tmp1267 = _tmp1255 + _tmp1266 ;
	_tmp1268 = *(_tmp1267) ;
	_tmp1269 = *(_tmp1268) ;
	_tmp1270 = *(_tmp1269) ;
	_tmp1271 = ACall _tmp1270 ;
	_tmp1272 = _tmp1268 - _tmp1271 ;
	_tmp1273 = *(_tmp1269 + 28) ;
	PushParam _tmp1272 ;
	ACall _tmp1273 ;
	PopParams 4 ;
_L93:
	_tmp1274 = 1 ;
	_tmp1275 = i + _tmp1274 ;
	i = _tmp1275 ;
	Goto _L90 ;
_L91:
	EndFunc ;
f_House.TakeAllTurns:
	BeginFunc 220 ;
	_tmp1276 = 0 ;
	i = _tmp1276 ;
_L95:
	_tmp1277 = 4 ;
	_tmp1278 = this + _tmp1277 ;
	_tmp1279 = *(_tmp1278) ;
	_tmp1280 = *(_tmp1279) ;
	_tmp1281 = i < _tmp1280 ;
	IfZ _tmp1281 Goto _L96 ;
	_tmp1282 = 4 ;
	_tmp1283 = this + _tmp1282 ;
	_tmp1284 = *(_tmp1283) ;
	_tmp1285 = 0 ;
	_tmp1286 = 4 ;
	_tmp1287 = *(_tmp1284) ;
	_tmp1288 = _tmp1287 == i ;
	_tmp1289 = _tmp1287 < i ;
	_tmp1290 = _tmp1289 || _tmp1288 ;
	_tmp1291 = i < _tmp1285 ;
	_tmp1292 = _tmp1291 || _tmp1290 ;
	IfZ _tmp1292 Goto _L97 ;
	_tmp1293 = "Decaf runtime error: Array subscript out of bound..." ;
	PushParam _tmp1293 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L97:
	_tmp1294 = i * _tmp1286 ;
	_tmp1295 = _tmp1294 + _tmp1286 ;
	_tmp1296 = _tmp1284 + _tmp1295 ;
	_tmp1297 = *(_tmp1296) ;
	_tmp1298 = *(_tmp1297) ;
	_tmp1299 = *(_tmp1298) ;
	_tmp1300 = ACall _tmp1299 ;
	_tmp1301 = _tmp1297 - _tmp1300 ;
	_tmp1302 = *(_tmp1298 + 20) ;
	PushParam _tmp1301 ;
	_tmp1303 = ACall _tmp1302 ;
	PopParams 4 ;
	IfZ _tmp1303 Goto _L98 ;
	_tmp1304 = 4 ;
	_tmp1305 = this + _tmp1304 ;
	_tmp1306 = *(_tmp1305) ;
	_tmp1307 = 0 ;
	_tmp1308 = 4 ;
	_tmp1309 = *(_tmp1306) ;
	_tmp1310 = _tmp1309 == i ;
	_tmp1311 = _tmp1309 < i ;
	_tmp1312 = _tmp1311 || _tmp1310 ;
	_tmp1313 = i < _tmp1307 ;
	_tmp1314 = _tmp1313 || _tmp1312 ;
	IfZ _tmp1314 Goto _L99 ;
	_tmp1315 = "Decaf runtime error: Array subscript out of bound..." ;
	PushParam _tmp1315 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L99:
	_tmp1316 = i * _tmp1308 ;
	_tmp1317 = _tmp1316 + _tmp1308 ;
	_tmp1318 = _tmp1306 + _tmp1317 ;
	_tmp1319 = *(_tmp1318) ;
	_tmp1320 = 12 ;
	_tmp1321 = this + _tmp1320 ;
	_tmp1322 = *(_tmp1321) ;
	PushParam _tmp1322 ;
	_tmp1323 = *(_tmp1319) ;
	_tmp1324 = *(_tmp1323) ;
	_tmp1325 = ACall _tmp1324 ;
	_tmp1326 = _tmp1319 - _tmp1325 ;
	_tmp1327 = *(_tmp1323 + 16) ;
	PushParam _tmp1326 ;
	ACall _tmp1327 ;
	PopParams 8 ;
_L98:
	_tmp1328 = 1 ;
	_tmp1329 = i + _tmp1328 ;
	i = _tmp1329 ;
	Goto _L95 ;
_L96:
	EndFunc ;
f_House.ResolveAllPlayers:
	BeginFunc 248 ;
	_tmp1330 = "\nTime to resolve bets.\n" ;
	PushParam _tmp1330 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp1331 = 0 ;
	i = _tmp1331 ;
_L100:
	_tmp1332 = 4 ;
	_tmp1333 = this + _tmp1332 ;
	_tmp1334 = *(_tmp1333) ;
	_tmp1335 = *(_tmp1334) ;
	_tmp1336 = i < _tmp1335 ;
	IfZ _tmp1336 Goto _L101 ;
	_tmp1337 = 4 ;
	_tmp1338 = this + _tmp1337 ;
	_tmp1339 = *(_tmp1338) ;
	_tmp1340 = 0 ;
	_tmp1341 = 4 ;
	_tmp1342 = *(_tmp1339) ;
	_tmp1343 = _tmp1342 == i ;
	_tmp1344 = _tmp1342 < i ;
	_tmp1345 = _tmp1344 || _tmp1343 ;
	_tmp1346 = i < _tmp1340 ;
	_tmp1347 = _tmp1346 || _tmp1345 ;
	IfZ _tmp1347 Goto _L102 ;
	_tmp1348 = "Decaf runtime error: Array subscript out of bound..." ;
	PushParam _tmp1348 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L102:
	_tmp1349 = i * _tmp1341 ;
	_tmp1350 = _tmp1349 + _tmp1341 ;
	_tmp1351 = _tmp1339 + _tmp1350 ;
	_tmp1352 = *(_tmp1351) ;
	_tmp1353 = *(_tmp1352) ;
	_tmp1354 = *(_tmp1353) ;
	_tmp1355 = ACall _tmp1354 ;
	_tmp1356 = _tmp1352 - _tmp1355 ;
	_tmp1357 = *(_tmp1353 + 20) ;
	PushParam _tmp1356 ;
	_tmp1358 = ACall _tmp1357 ;
	PopParams 4 ;
	IfZ _tmp1358 Goto _L103 ;
	_tmp1359 = 4 ;
	_tmp1360 = this + _tmp1359 ;
	_tmp1361 = *(_tmp1360) ;
	_tmp1362 = 0 ;
	_tmp1363 = 4 ;
	_tmp1364 = *(_tmp1361) ;
	_tmp1365 = _tmp1364 == i ;
	_tmp1366 = _tmp1364 < i ;
	_tmp1367 = _tmp1366 || _tmp1365 ;
	_tmp1368 = i < _tmp1362 ;
	_tmp1369 = _tmp1368 || _tmp1367 ;
	IfZ _tmp1369 Goto _L104 ;
	_tmp1370 = "Decaf runtime error: Array subscript out of bound..." ;
	PushParam _tmp1370 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L104:
	_tmp1371 = i * _tmp1363 ;
	_tmp1372 = _tmp1371 + _tmp1363 ;
	_tmp1373 = _tmp1361 + _tmp1372 ;
	_tmp1374 = *(_tmp1373) ;
	_tmp1375 = 8 ;
	_tmp1376 = this + _tmp1375 ;
	_tmp1377 = *(_tmp1376) ;
	_tmp1378 = *(_tmp1377) ;
	_tmp1379 = *(_tmp1378) ;
	_tmp1380 = ACall _tmp1379 ;
	_tmp1381 = _tmp1377 - _tmp1380 ;
	_tmp1382 = *(_tmp1378 + 32) ;
	PushParam _tmp1381 ;
	_tmp1383 = ACall _tmp1382 ;
	PopParams 4 ;
	PushParam _tmp1383 ;
	_tmp1384 = *(_tmp1374) ;
	_tmp1385 = *(_tmp1384) ;
	_tmp1386 = ACall _tmp1385 ;
	_tmp1387 = _tmp1374 - _tmp1386 ;
	_tmp1388 = *(_tmp1384 + 36) ;
	PushParam _tmp1387 ;
	ACall _tmp1388 ;
	PopParams 8 ;
_L103:
	_tmp1389 = 1 ;
	_tmp1390 = i + _tmp1389 ;
	i = _tmp1390 ;
	Goto _L100 ;
_L101:
	EndFunc ;
f_House.PrintAllMoney:
	BeginFunc 120 ;
	_tmp1391 = 0 ;
	i = _tmp1391 ;
_L105:
	_tmp1392 = 4 ;
	_tmp1393 = this + _tmp1392 ;
	_tmp1394 = *(_tmp1393) ;
	_tmp1395 = *(_tmp1394) ;
	_tmp1396 = i < _tmp1395 ;
	IfZ _tmp1396 Goto _L106 ;
	_tmp1397 = 4 ;
	_tmp1398 = this + _tmp1397 ;
	_tmp1399 = *(_tmp1398) ;
	_tmp1400 = 0 ;
	_tmp1401 = 4 ;
	_tmp1402 = *(_tmp1399) ;
	_tmp1403 = _tmp1402 == i ;
	_tmp1404 = _tmp1402 < i ;
	_tmp1405 = _tmp1404 || _tmp1403 ;
	_tmp1406 = i < _tmp1400 ;
	_tmp1407 = _tmp1406 || _tmp1405 ;
	IfZ _tmp1407 Goto _L107 ;
	_tmp1408 = "Decaf runtime error: Array subscript out of bound..." ;
	PushParam _tmp1408 ;
	LCall _PrintString ;
	PopParams 4 ;
	LCall _Halt ;
_L107:
	_tmp1409 = i * _tmp1401 ;
	_tmp1410 = _tmp1409 + _tmp1401 ;
	_tmp1411 = _tmp1399 + _tmp1410 ;
	_tmp1412 = *(_tmp1411) ;
	_tmp1413 = *(_tmp1412) ;
	_tmp1414 = *(_tmp1413) ;
	_tmp1415 = ACall _tmp1414 ;
	_tmp1416 = _tmp1412 - _tmp1415 ;
	_tmp1417 = *(_tmp1413 + 24) ;
	PushParam _tmp1416 ;
	ACall _tmp1417 ;
	PopParams 4 ;
	_tmp1418 = 1 ;
	_tmp1419 = i + _tmp1418 ;
	i = _tmp1419 ;
	Goto _L105 ;
_L106:
	EndFunc ;
f_House.PlayOneGame:
	BeginFunc 264 ;
	_tmp1420 = 12 ;
	_tmp1421 = this + _tmp1420 ;
	_tmp1422 = *(_tmp1421) ;
	_tmp1423 = *(_tmp1422) ;
	_tmp1424 = *(_tmp1423) ;
	_tmp1425 = ACall _tmp1424 ;
	_tmp1426 = _tmp1422 - _tmp1425 ;
	_tmp1427 = *(_tmp1423 + 16) ;
	PushParam _tmp1426 ;
	_tmp1428 = ACall _tmp1427 ;
	PopParams 4 ;
	_tmp1429 = 26 ;
	_tmp1430 = _tmp1428 < _tmp1429 ;
	IfZ _tmp1430 Goto _L108 ;
	_tmp1431 = 12 ;
	_tmp1432 = this + _tmp1431 ;
	_tmp1433 = *(_tmp1432) ;
	_tmp1434 = *(_tmp1433) ;
	_tmp1435 = *(_tmp1434) ;
	_tmp1436 = ACall _tmp1435 ;
	_tmp1437 = _tmp1433 - _tmp1436 ;
	_tmp1438 = *(_tmp1434 + 12) ;
	PushParam _tmp1437 ;
	ACall _tmp1438 ;
	PopParams 4 ;
_L108:
	_tmp1439 = *(this) ;
	_tmp1440 = *(_tmp1439) ;
	_tmp1441 = ACall _tmp1440 ;
	_tmp1442 = this - _tmp1441 ;
	_tmp1443 = *(_tmp1439) ;
	PushParam _tmp1442 ;
	ACall _tmp1443 ;
	PopParams 4 ;
	_tmp1444 = "\nDealer starts. " ;
	PushParam _tmp1444 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp1445 = 8 ;
	_tmp1446 = this + _tmp1445 ;
	_tmp1447 = *(_tmp1446) ;
	_tmp1448 = 0 ;
	PushParam _tmp1448 ;
	_tmp1449 = *(_tmp1447) ;
	_tmp1450 = *(_tmp1449) ;
	_tmp1451 = ACall _tmp1450 ;
	_tmp1452 = _tmp1447 - _tmp1451 ;
	_tmp1453 = *(_tmp1449 + 4) ;
	PushParam _tmp1452 ;
	ACall _tmp1453 ;
	PopParams 8 ;
	_tmp1454 = 8 ;
	_tmp1455 = this + _tmp1454 ;
	_tmp1456 = *(_tmp1455) ;
	_tmp1457 = 12 ;
	_tmp1458 = this + _tmp1457 ;
	_tmp1459 = *(_tmp1458) ;
	PushParam _tmp1459 ;
	_tmp1460 = *(_tmp1456) ;
	_tmp1461 = *(_tmp1460) ;
	_tmp1462 = ACall _tmp1461 ;
	_tmp1463 = _tmp1456 - _tmp1462 ;
	_tmp1464 = *(_tmp1460 + 8) ;
	PushParam _tmp1463 ;
	ACall _tmp1464 ;
	PopParams 8 ;
	_tmp1465 = *(this) ;
	_tmp1466 = *(_tmp1465) ;
	_tmp1467 = ACall _tmp1466 ;
	_tmp1468 = this - _tmp1467 ;
	_tmp1469 = *(_tmp1465) ;
	PushParam _tmp1468 ;
	ACall _tmp1469 ;
	PopParams 4 ;
	_tmp1470 = 8 ;
	_tmp1471 = this + _tmp1470 ;
	_tmp1472 = *(_tmp1471) ;
	_tmp1473 = 12 ;
	_tmp1474 = this + _tmp1473 ;
	_tmp1475 = *(_tmp1474) ;
	PushParam _tmp1475 ;
	_tmp1476 = *(_tmp1472) ;
	_tmp1477 = *(_tmp1476) ;
	_tmp1478 = ACall _tmp1477 ;
	_tmp1479 = _tmp1472 - _tmp1478 ;
	_tmp1480 = *(_tmp1476 + 16) ;
	PushParam _tmp1479 ;
	ACall _tmp1480 ;
	PopParams 8 ;
	_tmp1481 = *(this) ;
	_tmp1482 = *(_tmp1481) ;
	_tmp1483 = ACall _tmp1482 ;
	_tmp1484 = this - _tmp1483 ;
	_tmp1485 = *(_tmp1481) ;
	PushParam _tmp1484 ;
	ACall _tmp1485 ;
	PopParams 4 ;
	EndFunc ;
f_GetYesOrNo:
	BeginFunc 32 ;
	PushParam prompt ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp1486 = " (y/n) " ;
	PushParam _tmp1486 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp1487 = LCall _ReadLine ;
	answer = _tmp1487 ;
	_tmp1488 = "y" ;
	PushParam _tmp1488 ;
	PushParam answer ;
	_tmp1489 = LCall _StringEqual ;
	PopParams 8 ;
	_tmp1490 = "Y" ;
	PushParam _tmp1490 ;
	PushParam answer ;
	_tmp1491 = LCall _StringEqual ;
	PopParams 8 ;
	_tmp1492 = _tmp1489 || _tmp1491 ;
	Return _tmp1492 ;
	EndFunc ;
f_main:
main:
	BeginFunc 124 ;
	_tmp1493 = 1 ;
	keepPlaying = _tmp1493 ;
	_tmp1494 = 16 ;
	PushParam _tmp1494 ;
	_tmp1495 = LCall _Alloc ;
	PopParams 4 ;
	_tmp1496 = House ;
	*(_tmp1495) = _tmp1496 ;
	house = _tmp1495 ;
	_tmp1497 = *(house) ;
	_tmp1498 = *(_tmp1497) ;
	_tmp1499 = ACall _tmp1498 ;
	_tmp1500 = house - _tmp1499 ;
	_tmp1501 = *(_tmp1497 + 4) ;
	PushParam _tmp1500 ;
	ACall _tmp1501 ;
	PopParams 4 ;
	_tmp1502 = *(house) ;
	_tmp1503 = *(_tmp1502) ;
	_tmp1504 = ACall _tmp1503 ;
	_tmp1505 = house - _tmp1504 ;
	_tmp1506 = *(_tmp1502 + 8) ;
	PushParam _tmp1505 ;
	ACall _tmp1506 ;
	PopParams 4 ;
_L109:
	IfZ keepPlaying Goto _L110 ;
	_tmp1507 = *(house) ;
	_tmp1508 = *(_tmp1507) ;
	_tmp1509 = ACall _tmp1508 ;
	_tmp1510 = house - _tmp1509 ;
	_tmp1511 = *(_tmp1507 + 28) ;
	PushParam _tmp1510 ;
	ACall _tmp1511 ;
	PopParams 4 ;
	_tmp1512 = "\nDo you want to play another hand?" ;
	PushParam _tmp1512 ;
	_tmp1513 = LCall f_GetYesOrNo ;
	PopParams 4 ;
	keepPlaying = _tmp1513 ;
	Goto _L109 ;
_L110:
	_tmp1514 = *(house) ;
	_tmp1515 = *(_tmp1514) ;
	_tmp1516 = ACall _tmp1515 ;
	_tmp1517 = house - _tmp1516 ;
	_tmp1518 = *(_tmp1514 + 24) ;
	PushParam _tmp1517 ;
	ACall _tmp1518 ;
	PopParams 4 ;
	_tmp1519 = "Thank you for playing...come again soon.\n" ;
	PushParam _tmp1519 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp1520 = "\nCS143 BlackJack Copyright (c) 1999 by Peter Mor..." ;
	PushParam _tmp1520 ;
	LCall _PrintString ;
	PopParams 4 ;
	_tmp1521 = "(2001 mods by jdz)\n" ;
	PushParam _tmp1521 ;
	LCall _PrintString ;
	PopParams 4 ;
	EndFunc ;
